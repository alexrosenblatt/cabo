'''
def use_power2(drawn_card_power: int,human_stack: Stack,computer_stack: Stack) -> bool:
    if drawn_card_power == 1: #TODO rewrite to show revealed card with table rather than sentence
        peek_index = input("Which of your own cards would you like to look at? Respond with position number: \n")
        peek_position = int(peek_index)-1
        card_name = Card.get_card_data(human_stack[peek_position])
        power_presenter(drawn_card_power, card_name, '', int(peek_index))
        return True
    elif drawn_card_power == 2:
        peek_index = input("Which of your opponents cards would you like to look at? Respond with position number: \n")
        peek_position = int(peek_index)-1
        card_name = Card.get_card_data(computer_stack[peek_position])
        power_presenter(drawn_card_power,card_name,'',int(peek_index))
        return True
    elif drawn_card_power == 3:
        source_index = int(input("Which of your cards would you like to swap? Please enter position number."))
        dest_index = int(input("Which of your opponents cards would you like to swap with? Please enter position number."))
        source_position = source_index-1
        dest_position = source_position-1
        transfer(human_stack,computer_stack,source_position,dest_position)
        power_presenter(drawn_card_power,'',0,source_index,dest_index) # TODO lol bad fix this
        return True
    elif drawn_card_power == 4:
        source_index = int(input("Which of your cards would you like to swap? Please enter position number."))
        dest_index = int(input("Which of your opponents cards would you like to swap with? Please enter position number."))
        source_position = source_index-1
        dest_position = dest_index-1
        swap_results = swap(human_stack,computer_stack,source_position,dest_position,True)
        power_presenter(drawn_card_power,swap_results[0],swap_results[1],0,source_index,dest_index)
        return True
    else:
        return False       



def power_presenter(drawn_card_power: int, card_name1: str = '',card_name2: str = '', peek_position: int = 0, source_index: int = 0, dest_index: int = 0) -> str:
    if drawn_card_power == 1:
        print(f"{card_name1} is in position {peek_position} in your hand.")
    elif drawn_card_power == 2:
        print(f"{card_name1} is in position {peek_position} in your opponents hand.")
    elif drawn_card_power == 3:
        print(f"Your card at position {source_index} was swapped with your opponents card at position {dest_index}.")
    elif drawn_card_power == 4:
        print(f"{card_name1} at position {source_index} was swapped with {card_name2} at position {dest_index} ")
    elif drawn_card_power == 5:
        pass


    def draw_card(self,index:int = 0) -> Card:
        drawn_card = self.pop(index)
        return drawn_card


# TODO need to add error handling and fix the return function here and/or get rid of
#   def get_power_string(self) -> str:
#        '''This function returns the string related to the objects power.'''
#        for key,value in c.POWERS.items():
#            if self.power == value:
#                return key


def get_top_card(stack_name: Stack) -> str:
        return stack_name[0].name


        
#    def show_card(self):
#        return self.name
 

    
#   how can i rewrite this to have the default stack? #TODO seperate the presentation logic
#def show_top_discard(stack_name: Stack) -> str:
#        top_card = get_drawn_card(stack_name.)
#        return f"\n The top card in the discard pile is: {top_card}."




#    def get_data(self) -> bool:
#        '''This returns the details of a specific card.'''
#        print(f'{self.name},{self.value},{self.power}
# ')
#        return True


#    def remove(self,index: int ):
#        self.members.pop(index)
#        return True
    
#    def add(self,index:int ,card:Card):
#        self.members.insert(index,card)
#        return True

def show_placeholder_hand(stack_name: Stack) -> str:
        hand:List[List[str]] = [["Position","Card"]]
        cards:Card
        response:str = ''
        index = 1
        for cards in stack_name:
                hand.append([f"Position: {index}",'x'])
                index += 1
        table = tabulate(hand,tablefmt="fancy_grid",headers='firstrow')
        response = f"\n\n\n{stack_name.name}: \n\n {table}"
        return response



'''